@using Blazorise
@using Blazorise.Charts
@page "/visualizer"

<PageTitle>Visualizer</PageTitle>

<h3>Visualizer</h3>

<div class="row">
    <div class="col-md-6">
        <h4>Signal Generator</h4>
        <button class="btn btn-primary" @onclick="GenerateSignal">Generate Signal</button>
        <button @onclick="ResetSignal">Reset Signal</button>
        <Button Color="Color.Primary" Clicked="@(async () => await HandleRedraw(generatedSignal, lineChartGenerated))">Redraw</Button>
        <LineChart @ref="lineChartGenerated" TItem="double" />
    </div>
    <div class="col-md-6">
        <h4>Signal Smoother</h4>
        <button @onclick="SmoothSignal">Smooth Signal</button>
        <button @onclick="ResetSmoothedSignal">Reset Smoothed Signal</button>
        <Button Color="Color.Primary" Clicked="@(async () => await HandleRedraw(smoothedSignal, lineChartSmoothed))">Redraw</Button>
        <LineChart @ref="lineChartSmoothed" TItem="double" />
    </div>
</div>


@code {
    List<double> generatedSignal = new List<double>();
    List<double> smoothedSignal = new List<double>();
    bool isFirstRender = true;
    List<string> labels = new List<string>();
    Random random = new Random();

    double noise = .0;
    double signal = .0;
    int frequency = 5;
    static int time = 2;
    static int samplingFrequency = 1600; 
    int totalSamples = samplingFrequency * time;

    private void GenerateSignal()
    {
        if (generatedSignal.Count > 0)
        {
            generatedSignal.Clear();
            labels.Clear();
        }

        for (int i = 0; i < totalSamples; i++)
        {
            noise = random.NextDouble();
            signal = Math.Sin(2 * Math.PI * frequency * i / samplingFrequency) + noise;
            generatedSignal.Add(signal);
            labels.Add(i.ToString());
        }
    }

    // Plotting section
    LineChart<double> lineChartGenerated;
    LineChart<double> lineChartSmoothed;

    
    async Task HandleRedraw(List<double> data, LineChart<double> chart )
    {
        await chart.Clear();
        await chart.AddLabelsDatasetsAndUpdate(labels, GetLineChartDataset(data));
    }
    LineChartDataset<double> GetLineChartDataset(List<double> data )
    {
        return new LineChartDataset<double>
            {
                Label = "# of randoms",
                Data = data,
                CubicInterpolationMode = "monotone",
            };
    }


    private void SmoothSignal()
    {
        if (generatedSignal.Count == 0)
        {
            return;
        }
        int windowSize = 100;

        List<double> smoothed = new List<double>();

        for (int i = 0; i < generatedSignal.Count; i++)
        {
            double sum = 0;
            for (int j = i - windowSize / 2; j <= i + windowSize / 2; j++)
            {
                if (j >= 0 && j < generatedSignal.Count)
                {
                    sum += generatedSignal[j];
                }
            }
            double average = sum / windowSize;
            smoothed.Add(average);
        }
        smoothedSignal = smoothed;
    }

    private void ResetSignal()
    {
        generatedSignal.Clear();
        labels.Clear();
    }

    private void ResetSmoothedSignal()
    {
        smoothedSignal.Clear();
        labels.Clear(); 
    }
}